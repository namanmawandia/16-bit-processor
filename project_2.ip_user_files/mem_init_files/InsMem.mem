0011000000001010  // addi r0, r0, 10 (load 10 into r0)
0011000100010001  // addi r1, r1, 1  (load 1 into r1)
0011001000100011  // addi r2, r2, 3  (load 3 into r2)
0011001100110100  // addi r3, r3, 4  (load 4 into r3)
0011010001000110  // addi r4, r4, 5   (load 5 into r4)
0000000100100000  // add r1, r2, r1  (r1 = r2 + r1 = 3 + 1 = 4)
0000000100010001  // sub r1, r1, r1  (r1 = r1 - r1 = 13 - 13 = 0)
0000001000100010  // sll r1, r2, r1  (r2 = r2 << r2 = 3 << 3 = 24)
0000001100110011  // and r1, r1, r1  (r3 = r3 & r3 = 4 & 4= 4)
0011001100111111  // addi r3,r3,-1    (value if r3 changes to 3) 
0001000100110000  // lw r1, r3, 0    (r1 = r3+0 = r3 = 3)
0011000100010000  // addi r1, r1, 0  (to show value of updated r1=3)
0010001100110001  // sw r3, r3, 1    (store value of r3 at addr(val(r3)+1)=addr(3+1)) 
0100000000110010  // beq r3, r3, 2    (branch to PC+2 if r0 == r1)
0101000000000010  // bne r0, r0, 2    (branch to PC+2 if r0 != r1)
0011010001000000  // addi r4, r4, 0  (know the value in r4)
0011000000001010  // addi r0, r0, 1 (add 10 into r0)
0011000100010001  // addi r1, r1, 1  (add 1 into r1)
0011001000100011  // addi r2, r2, 3  (add 3 into r2)
0011001000100011  // addi r2, r2, 3  (add 3 into r2)
0110000000000110  // jmp 5     